/*
 * Swagger DS/CS 519 Assessment - OpenAPI 3.0
 *
 * This is the grading API for the course assessment.   Some useful links: - [The Pet Store repository](https://github.com/swagger-api/swagger-petstore) - [The source API definition for the Pet Store](https://github.com/swagger-api/swagger-petstore/blob/master/src/main/resources/openapi.yaml)
 *
 * OpenAPI spec version: 0.0.1
 * Contact: nagendra@bu.edu
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace API
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class Shipment : IEquatable<Shipment>
    { 

        [DataMember(Name="id")]
        public string id { get; set; }

        /// <summary>
        /// Gets or Sets UniversityId
        /// </summary>
        [Required]

        [DataMember(Name="ShipmentID")]
        public string ShipmentID { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [Required]

        [DataMember(Name="WarehouseID")]
        public string WarehouseID { get; set; }

        /// <summary>
        /// Gets or Sets DateEnrolled
        /// </summary>

        [DataMember(Name="Date")]
        public DateTime? Date { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [Required]

        [DataMember(Name="ShippingPO")]
        public string ShippingPO { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [Required]

        [DataMember(Name="BoxesRcvd")]
        public string BoxesRcvd { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [Required]

        [DataMember(Name="ShipperID")]
        public string ShipperID { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Shipment {\n");
            sb.Append("  Date: ").Append(Date).Append("\n");
            sb.Append("  WarehouseID: ").Append(WarehouseID).Append("\n");
            sb.Append("  ShippingPO: ").Append(ShippingPO).Append("\n");
            sb.Append("  ShipmentID: ").Append(ShipmentID).Append("\n");
            sb.Append("  BoxesRcvd: ").Append(BoxesRcvd).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((Shipment)obj);
        }

        /// <summary>
        /// Returns true if Shipment instances are equal
        /// </summary>
        /// <param name="other">Instance of Shipment to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Shipment other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    ShipmentID == other.ShipmentID ||
                    ShipmentID != null &&
                    ShipmentID.Equals(other.ShipmentID)
                ) && 
                (
                    ShipperID == other.ShipperID ||
                    ShipperID != null &&
                    ShipperID.Equals(other.ShipperID)
                ) && 
                (
                    ShippingPO == other.ShippingPO ||
                    ShippingPO != null &&
                    ShippingPO.Equals(other.ShippingPO)
                ) && 
                (
                    WarehouseID == other.WarehouseID ||
                    WarehouseID != null &&
                    WarehouseID.Equals(other.WarehouseID)
                ) && 
                (
                    BoxesRcvd == other.BoxesRcvd ||
                    BoxesRcvd != null &&
                    BoxesRcvd.Equals(other.BoxesRcvd)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (ShipmentID != null)
                    hashCode = hashCode * 59 + ShipmentID.GetHashCode();
                    if (WarehouseID != null)
                    hashCode = hashCode * 59 + WarehouseID.GetHashCode();
                    if (Date != null)
                    hashCode = hashCode * 59 + Date.GetHashCode();
                    if (ShippingPO != null)
                    hashCode = hashCode * 59 + ShippingPO.GetHashCode();
                    if (ShipmentID != null)
                    hashCode = hashCode * 59 + ShipmentID.GetHashCode();
                    if (BoxesRcvd != null)
                    hashCode = hashCode * 59 + BoxesRcvd.GetHashCode();                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(Shipment left, Shipment right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(Shipment left, Shipment right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
